use lowlevel;
use parse::lexer::Token;

grammar<'input>;

// [1] turtleDoc ::= statement*
pub turtle_doc: () = { statement* };

// [2] statement ::= directive | triples '.'
statement: () = {
    directive,
    triples ".",
};

// [3]  directive ::= prefixID | base | sparqlPrefix | sparqlBase
directive: () = {
    prefix_id,
    base,
    sparql_prefix,
    sparql_base,
};

// [4] prefixID ::= '@prefix' PNAME_NS IRIREF '.'
prefix_id: () = {
    "@prefix" "PNAME_NS" "IRIREF" ".",
};

// [5] base ::= '@base' IRIREF '.'
base: () = {
    "@base" "IRIREF" ".",
};

// [5s] sparqlBase ::= "BASE" IRIREF
sparql_base: () = {
    "BASE" "IRIREF",
};

// [6s] sparqlPrefix ::= "PREFIX" PNAME_NS IRIREF
sparql_prefix: () = {
    "PREFIX" "PNAME_NS" "IRIREF",
};

// [6] triples ::= subject predicateObjectList | blankNodePropertyList predicateObjectList?
triples: () = {
    subject predicateObjectList,
    blankNodePropertyList predicateObjectList?
};

// [7] predicateObjectList ::= verb objectList (';' (verb objectList)?)*
predicateObjectList: () = verb objectList (";" (verb objectList)?)*;

// [8] objectList ::= object (',' object)*
objectList: () = object ("," object)*;

// [9] verb ::= predicate | 'a'
verb: () = {
    predicate,
    "a",
};

// [10] subject ::= iri | BlankNode | collection
subject: () = {
    iri,
    BlankNode,
    collection,
};

// [11] predicate ::= iri
predicate: lowlevel::Term<'input> = iri => lowlevel::Term::Literal { value: <>, language: None, datatype: None };

// [12] object ::= iri | BlankNode | collection | blankNodePropertyList | literal
object: () = {
    iri,
    BlankNode,
    collection,
    blankNodePropertyList,
    literal,
};

// [13] literal ::= RDFLiteral | NumericLiteral | BooleanLiteral
literal: lowlevel::Term<'input> = {
    RDFLiteral => <>,
    NumericLiteral => <>,
    BooleanLiteral => <>,
};

// [14] blankNodePropertyList ::= '[' predicateObjectList ']'
blankNodePropertyList: () = "[" predicateObjectList "]";

// [15] collection ::= '(' object* ')'
collection: () = "(" object* ")";

// [16] NumericLiteral ::= INTEGER | DECIMAL | DOUBLE
NumericLiteral: lowlevel::Term<'input> = {
    "INTEGER" => lowlevel::Term::Literal { value: <>, language: None, datatype: None },
    "DECIMAL" => lowlevel::Term::Literal { value: <>, language: None, datatype: None },
    "DOUBLE" => lowlevel::Term::Literal { value: <>, language: None, datatype: None },
};

// [128s] RDFLiteral ::= String (LANGTAG | '^^' iri)?
RDFLiteral: lowlevel::Term<'input> = {
    <v:String> <lang:"LANGTAG"> => {
        lowlevel::Term::Literal { value: v, language: Some(lang), datatype: None }
    },
    <v:String> "^^" <dt:iri> => {
        lowlevel::Term::Literal { value: v, language: None, datatype: Some(dt) }
    },
    <v:String> => {
        lowlevel::Term::Literal { value: v, language: None, datatype: None }
    },
};

// [133s] BooleanLiteral ::= 'true' | 'false'
BooleanLiteral: lowlevel::Term<'input> = {
    "true" => lowlevel::Term::Literal { value: "true", language: None, datatype: None },
    "false" => lowlevel::Term::Literal { value: "false", language: None, datatype: None },
};

// [17] String ::= STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
String: &'input str = {
    "STRING_LITERAL_QUOTE" => <>,
    "STRING_LITERAL_LONG_QUOTE" => <>,
    "STRING_LITERAL_SINGLE_QUOTE" => <>,
    "STRING_LITERAL_LONG_SINGLE_QUOTE" => <>,
};

// [135s] iri ::= IRIREF | PrefixedName
iri: &'input str = {
    "IRIREF" => <>,
    PrefixedName => <>,
};

// [136s] PrefixedName ::= PNAME_LN | PNAME_NS
PrefixedName: &'input str = {
    "PNAME_LN" => <>,
    "PNAME_NS" => <>,
};

// [137s] BlankNode ::= BLANK_NODE_LABEL | ANON
BlankNode: () = {
    "BLANK_NODE_LABEL",
    "ANON",
};

extern {
    type Location = usize;

    enum Token<'input> {
        "." => Token::Period,
        "," => Token::Comma,
        ";" => Token::SemiColon,
        "[" => Token::LeftBracket,
        "]" => Token::RightBracket,
        "(" => Token::LeftParen,
        ")" => Token::RightParen,
        "^^" => Token::Carets,
        "a" => Token::A,
        "true" => Token::True,
        "false" => Token::False,
        "@prefix" => Token::Prefix(<&'input str>),
        "@base" => Token::Base(<&'input str>),
        "PREFIX" => Token::SparqlPrefix(<&'input str>),
        "BASE" => Token::SparqlBase(<&'input str>),
        "PNAME_LN" => Token::PNAME_LN(<&'input str>),
        "PNAME_NS" => Token::PNAME_NS(<&'input str>),
        "IRIREF" => Token::IRIRef(<&'input str>),
        "LANGTAG" => Token::LangTag(<&'input str>),
        "INTEGER" => Token::Integer(<&'input str>),
        "DECIMAL" => Token::Decimal(<&'input str>),
        "DOUBLE" => Token::Double(<&'input str>),
        "STRING_LITERAL_QUOTE" => Token::StringLiteralQuote(<&'input str>),
        "STRING_LITERAL_LONG_QUOTE" => Token::StringLiteralLongQuote(<&'input str>),
        "STRING_LITERAL_SINGLE_QUOTE" => Token::StringLiteralSingleQuote(<&'input str>),
        "STRING_LITERAL_LONG_SINGLE_QUOTE" => Token::StringLiteralLongSingleQuote(<&'input str>),
        "BLANK_NODE_LABEL" => Token::BlankNodeLabel(<&'input str>),
        "ANON" => Token::ANON,
        "COMMENT" => Token::Comment(<&'input str>),
    }
}
