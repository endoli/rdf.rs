use lowlevel;
use parse::lexer::Token;

grammar<'input>;

// [1]	ntriplesDoc	::=	triple? (EOL triple)* EOL?
pub ntriples_doc: () = triple? ("EOL" triple)* "EOL"?;

// [2]	triple	::=	subject predicate object '.'
triple: lowlevel::Triple<'input> = <subject:subject> <predicate:predicate> <object:object> "." => lowlevel::Triple { <> };

// [3]	subject	::=	IRIREF | BLANK_NODE_LABEL
subject: lowlevel::Term<'input> = {
    "IRIREF" => lowlevel::Term::NamedNode { value: <> },
    "BLANK_NODE_LABEL" => lowlevel::Term::BlankNode { value: <> },
};

// [4]	predicate	::=	IRIREF
predicate: lowlevel::Term<'input> = "IRIREF" => lowlevel::Term::NamedNode { value: <> };

// [5]	object	::=	IRIREF | BLANK_NODE_LABEL | literal
object: lowlevel::Term<'input> = {
    "IRIREF" => lowlevel::Term::NamedNode { value: <> },
    "BLANK_NODE_LABEL" => lowlevel::Term::BlankNode { value: <> },
    literal,
};

// [6]	literal	::=	STRING_LITERAL_QUOTE ('^^' IRIREF | LANGTAG)?
literal: lowlevel::Term<'input> = {
    <v:"STRING_LITERAL_QUOTE"> "^^" <dt:"IRIREF"> => {
        lowlevel::Term::Literal { value: v, language: None, datatype: Some(dt) }
    },
    <v:"STRING_LITERAL_QUOTE"> <lang:"LANGTAG"> => {
        lowlevel::Term::Literal { value: v, language: Some(lang), datatype: None }
    },
    <v:"STRING_LITERAL_QUOTE"> => {
        lowlevel::Term::Literal { value: v, language: None, datatype: None }
    },
};

extern {
    type Location = usize;

    enum Token<'input> {
        "EOL" => Token::EOL,
        "." => Token::Period,
        "^^" => Token::Carets,
        "IRIREF" => Token::IRIRef(<&'input str>),
        "LANGTAG" => Token::LangTag(<&'input str>),
        "STRING_LITERAL_QUOTE" => Token::StringLiteralQuote(<&'input str>),
        "BLANK_NODE_LABEL" => Token::BlankNodeLabel(<&'input str>),
        "COMMENT" => Token::Comment(<&'input str>),
    }
}
